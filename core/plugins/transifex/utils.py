import os
import sys
import json
import codecs
import re
from hashlib import sha1
from hashlib import md5
from collections import namedtuple

import logging
logger = logging.getLogger(__name__)

import api as transifex

def translation_review_completed(language_stats_response_text):
    try:
        j = json.loads(language_stats_response_text)
        r = j['reviewed_percentage']
    except ValueError as e:
        logger.error("Failed to parse response text. Reason: '{}'. Context: '{}'".format(str(e), language_stats_response_text))
        return False
    except KeyError as e:
        logger.error("Faild to check review status. Reason: '{}', Context: '{}'.".format(e, j))
        return False
    else:
        return r == '100%'

def get_translation_content(get_translation_response_text):
    try:
        d = json.loads(get_translation_response_text)
        r = j['content']
    except ValueError as e:
        logger.error("Failed to parse response text. Reason: '{}'. Context: '{}'".format(str(e), get_translation_response_text))
        return None 
    except KeyError as e:
        logger.error("Faild to get translation conntent. Reason: '{}', Context: '{}'.".format(e, j))
        return None
    else:
        return r

def generate_project_slug(prefix, project_name):
    """ A project slug format is
            <project slug prefix>[a-z0-9-]+
        [a-z0-9-]+ part is generated from project name in translation config.
    """
    s = project_name.strip().lower()
    slug = '{}{}'.format(prefix, re.sub('[^a-z0-9]', '-', s))
    
    # TODO --- need to check w/ Trnaisfex support about this limit.
    #if len(slug) > self._TRANSIFEX_PROJECT_SLUG_LEN:
    #    sys.stderr.write("Project slug excceeded max length.")
    #    sys.stderr.write("Generated: {}".format(slug))
    #    return None

    return slug

def generate_resource_slug(prefix, seeds):
        """ A resource slug format is
                <resource slug prefix><sha1>
            <sha1> is generated by given string 'seeds'.
        """
        text = ''.join(seeds).encode('utf-8')
        return '{}{}'.format(prefix, sha1(text).hexdigest())

'''
    Platform specific function which will be called by core/translation.py.


        Note:
            Function signature should be similar w/ one in core/translation.py.
            Return value should be similar w/ one in core/translation.py.
'''

def _setup_dir(path):
    if not os.path.isdir(path):
        try:
            os.makedirs(path)
        except OSError as e:
            logger.error("Failed to create directory: '{}'. Reason: {}".format(path, e))
        else:
            if not os.path.isdir(path):
                logger.error("Created directory does not exist: '{}'.".format(path))

def _create_text_file(path, text):
    if os.path.isfile(path):
        os.remove(path)
       
    try:
        if sys.version_info[0:1] == (2,):
            with codecs.open(path, 'w', encoding='utf-8') as fo:
                fo.write(text)
        else:
            with open(path, 'w') as fo:
                fo.write(text)
    except(IOError, OSError) as e:
        logger.error("Failed to write text file: '{}', Reason: '{}',  Context: '{}'.".format(path, e, text)) 
    else:
        pass

# Transifex project (summary).
#
# keys                  values
# -------------------------------------------
# slug                  project slug
# name                  project name
# description           project description
TransifexProject = namedtuple('TransifexProject', 'slug, name, description')

def get_platform_projects(creds, dest):
    """ 
    Return list of project information (TransifexProject tuples).
    Return None on any errors.    

    Create a text file (specified path by dest param) to log query results.

        NOTE:
        A projects cache file is created each time this is called (but this
        function never read the file because accessible projects are based
        on creds).
    """
    ret = transifex.get_projects(creds)
    if ret.succeeded:
        try:
            j = json.loads(ret.response.text)
            _create_text_file(dest, ret.response.text)
        except ValueError as e:
            logger.error("Failed to load response text as json. Reason: '{}', Text: '{}'.".format(e, ret.response.text))
            return None
        else:
            l = []
            try:
                for x in j:
                    l.append(TransifexProject(x['slug'], x['name'], x['description']))
            except KeyError as e:
                logger.error("Failed to process Transifex projects json. Reason: '{}', Context: '{}'.".format(e, j))
                return None
            else:
                return l
    else:
        logger.error("Failed to get Transifex projects. Reason: '{}'.".format(ret.message))
        return None

# Transifex resource (summary).
#
# slug                  resource slug
# name                  resource name
TransifexResource = namedtuple('TransifexResource', 'slug, name')

# Transifex project details. 
#
# keys                  values
# -------------------------------------------
# slug                  project slug
# name                  project name
# description           project description
# source_language_code  language code of source strings.
# resources             list of TransifexResource
TransifexProjectDetails = namedtuple('TransifexProjectDetails', 'slug, name, description, source_language_code, resources')

def get_platform_project_details(creds, dest, pslug):
    """ 
    Return details for a specified project as a TransifexProjectDetails tuple.
    Return None on any errors.

    Write query results as a text file which path is specified by dest param.
    """
    ret = transifex.get_project_details(pslug, creds)
    if ret.succeeded:
        try:
            j = json.loads(ret.response.text)
            _create_text_file(dest, ret.response.text)
            l = []
            for x in j['resources']:
                l.append(TransifexResource(x['slug'], x['name']))
            r = TransifexProjectDetails(j['slug'], j['name'], j['description'], j['source_language_code'], l)
        except ValueError as e:
            logger.error("Failed to load response text as json. Reason: '{}', Text: '{}'.".format(e, ret.response.text))
            return None
        except KeyError as e:
            logger.error("Failed to process Transifex project json. Reason: '{}', Context: '{}'.".format(e, j))
            return None
        else:
            return r
    else:
        logger.error("Failed to get Transifex project. Reason: '{}'.".format(ret.message))
        return None

def read_platform_project_details(creds, dest):
    if not (os.path.exists(dest) and os.path.getsize(dest) > 0):
        return None
    try:
        with open(dest, 'r') as fi:
            j = json.load(fi)
            l = []
            for x in j['resources']:
                l.append(TransifexResource(x['slug'], x['name']))
            r = TransifexProjectDetails(j['slug'], j['name'], j['description'], j['source_language_code'], l)
    except ValueError as e:
        logger.error("Failed to load project details file as json. Reason: '{}', File: '{}'.".format(e, dest))
        return None
    except KeyError as e:
        logger.error("Failed to process Transifex project json. Reason: '{}', Context: '{}'.".format(e, j))
        return None
    else:
        return r

# Transifex resource details.
#
# slug                          resource slug
# name                          resource name
# last_updated                  last updated date for the resource
# num_strings                   number of strings in the resource
# num_words                     number of words in the source
# language_code                 language code of the resource
# translated_language_codes     list of language code for translations
TransifexResourceDetails = namedtuple('TransifexResourceDetails', 'slug, name, last_updated, num_strings, num_words, language_code, translated_language_codes')

def get_platform_project_resource_details(creds, dest, pslug, rslug):
    """ 
    Return details for a specified project resource as a TransifexResourceDetails tuple.
    Return None on any errors.

    Write query results as a text file which path is specified by dest param.
    """
    ret = transifex.get_resource_details(pslug, rslug, creds)
    if ret.succeeded:
        try:
            j = json.loads(ret.response.text)
            _create_text_file(dest, ret.response.text)
            l = []
            for x in j['available_languages']:
                l.append(x['code'])
            r = TransifexResourceDetails(j['slug'], j['name'], j['last_update'], j['total_entities'], j['wordcount'], j['source_language_code'], l)
        except ValueError as e:
            logger.error("Failed to load resource details as json. Reason: '{}', Context: '{}'.".format(e, ret.response.text))
            return None
        except KeyError as e:
            logger.error("Failed to process Transifex resource json. Reason: '{}', Context: '{}'.".format(e, j))
        else:
            return r
    else:
        logger.error("Failed to get Transifex resource details. Reason: '{}'.".format(ret.message))
        return None

def read_platform_project_resource_details(creds, dest):
    if not (os.path.exists(dest) and os.path.getsize(dest) > 0):
        return None
    try:
        with open(dest, 'r') as fi:
            j = json.load(fi)
            l = []
            for x in j['available_languages']:
                l.append(x['code'])
            r = TransifexResourceDetails(j['slug'], j['name'], j['last_update'], j['total_entities'], j['wordcount'], j['source_language_code'], l)
    except ValueError as e:
        logger.error("Failed to load project details file as json. Reason: '{}', File: '{}'.".format(e, dest))
        return None
    except KeyError as e:
        logger.error("Failed to process Transifex project json. Reason: '{}', Context: '{}'.".format(e, j))
        return None
    else:
        return r
    
# Transifex translation string details.
#
# key                   key for the string.
# source                source string.
# translation           translation for the source string.
# reviewed              true when reviewed, false otherwise.               
# last_updated          last updated date.
TransifexTranslationStringDetails = namedtuple('TransifexTranslationStringDetails', 'key, source, translation, reviewed, last_updated')

def get_platform_project_translation_strings(creds, dest, pslug, rslug, lang):
    """ 
    Return list of translation string (TransifexTranslationStringDetails tuple) for a specified language of project resource.
    Return None on any errors.

    Write query results as a text file which path is specified by dest param.
    """
    ret = transifex.get_translation_strings_details(pslug, rslug, lang, creds)
    if ret.succeeded:
        try:
            j = json.loads(ret.response.text)
            _create_text_file(dest, ret.response.text)
            l = []
            for x in j:
                l.append(TransifexTranslationStringDetails(x['key'], x['source_string'], x['translation'], x['reviewed'], x['last_update']))
        except ValueError as e:
            logger.error("Failed to load translation strings as json. Reason: '{}', Context: '{}'.".format(e, ret.response.text))
            return None
        except KeyError as e:
            logger.error("Failed to process Transifex translation strings json. Reason: '{}', Context: '{}'.".format(e, j))
        else:
            return l
    else:
        logger.error("Failed to get Transifex translation strings. Reason: '{}'.".format(ret.message))
        return None

def read_platform_project_translation_strings(creds, dest):
    if not (os.path.exists(dest) and os.path.getsize(dest) > 0):
        return None
    try:
        with open(dest, 'r') as fi:
            j = json.load(fi)
            l = []
            for x in j:
                l.append(TransifexTranslationStringDetails(x['key'], x['source_string'], x['translation'], x['reviewed'], x['last_update']))
    except ValueError as e:
        logger.error("Failed to load translation strings file as json. Reason: '{}', File: '{}'.".format(e, dest))
        return None
    except KeyError as e:
        logger.error("Failed to process Transifex translation strings json. Reason: '{}', Context: '{}'.".format(e, j))
        return None
    else:
        return l

def calc_string_hash(string_key):
    return md5(':'.join([string_key, ""]).encode('utf-8')).hexdigest()

# Transiefx source string details.
#
# comment               Instructions attached to the source string.
# tags                  List of tags attached to the source string.
TransifexSourceStringDetails = namedtuple('TransifexSourceStringDetails', 'comment, tags')

def get_platform_project_source_string_details(creds, dest, pslug, rslug, string_hash):
    """ 
    Return details of a source string (TransifexSourceStringDetails tuple).
    Return None on any errors.

    Write query results as a text file which path is specified by dest param.
    """
    ret = transifex.get_source_string_details(pslug, rslug, string_hash, creds)
    if ret.succeeded:
        try:
            j = json.loads(ret.response.text)
            _create_text_file(dest, ret.response.text)
            d = TransifexSourceStringDetails(j['comment'], j['tags'])
        except ValueError as e:
            logger.error("Failed to load source string details as json. Reason: '{}', Context: '{}'.".format(e, ret.response.text))
            return None
        except KeyError as e:
            logger.error("Failed to process Transifex source string json. Reason: '{}', Context: '{}'.".format(e, j))
        else:
            return d
    else:
        logger.error("Failed to get Transifex source string details. Reason: '{}'.".format(ret.message))
        return None

def read_platform_project_source_string_details(creds, dest):
    if not (os.path.exists(dest) and os.path.getsize(dest) > 0):
        return None
    try:
        with open(dest, 'r') as fi:
            j = json.load(fi)
            r = TransifexSourceStringDetails(j['comment'], j['tags'])
    except ValueError as e:
        logger.error("Failed to load source string file as json. Reason: '{}', File: '{}'.".format(e, dest))
        return None
    except KeyError as e:
        logger.error("Failed to process Transifex source string json. Reason: '{}', Context: '{}'.".format(e, j))
        return None
    else:
        return r

# Transifex translation stats for a resource.
#
# project_slug                  project slug
# resource_slug                 resource slug
# name                          resource name
# language_code                 language code of this stats
# last_updated                  last updated date for the resource
# last_updated_by               who last updated the resource
# num_reviewed_strings          number of reviewed strings.
# percentage_reviewed_strings   percentage of reviewed strings. e.g. '80%'
# num_translated_strings        number of translated strings.
# num_untranslated_strings      number of untranslated strings.
# percentage_translated_strings percentage of translated strings. e.g. '80%'
# num_translated_words          number of translated words.
# num_untranslated_words        number of untranslated words.
TransifexTranslationStats = namedtuple('TransifexTranslationStats', 'project_slug, resource_slug, name, language_code, last_updated, last_updated_by, num_reviewed_strings, percentage_reviewed_strings, num_translated_strings, num_untranslated_strings, percentage_translated_strings, num_translated_words, num_untranslated_words')

def get_all_translation_stats(creds, project_slug, resource_slug):
    ret = transifex.get_resource_stats(project_slug, resource_slug, creds)
    if not ret.succeeded:
        logger.error("Failed to get resource stats. Reason: '{}'.".format(ret.message))
        return None

    try:
        data = json.loads(ret.response.text)
    except ValueError as e:
        logger.error("Failed to parse response text as json. Reason: '{}'.".format(e))
        return None
    else:
        results = []
        for lang_key, kv_value in data.iteritems():
            results.append(TransifexTranslationStats(
                            project_slug,
                            resource_slug,
                            "<rsource name>",
                            lang_key,
                            kv_value['last_update'],
                            kv_value['last_commiter'],
                            kv_value['reviewed'],
                            kv_value['reviewed_percentage'],
                            kv_value['translated_entities'],
                            kv_value['untranslated_entities'],
                            kv_value['completed'],
                            kv_value['translated_words'],
                            kv_value['untranslated_words']))
        return results

